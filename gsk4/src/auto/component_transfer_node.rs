// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, ComponentTransfer, RenderNode};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GskComponentTransferNode")]
    pub struct ComponentTransferNode(Shared<ffi::GskComponentTransferNode>);

    match fn {
        ref => |ptr| ffi::gsk_render_node_ref(ptr as *mut ffi::GskRenderNode),
        unref => |ptr| ffi::gsk_render_node_unref(ptr as *mut ffi::GskRenderNode),
    }
}

impl StaticType for ComponentTransferNode {
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::gsk_component_transfer_node_get_type()) }
    }
}

impl ComponentTransferNode {
    #[doc(alias = "gsk_component_transfer_node_new")]
    pub fn new(
        child: impl AsRef<RenderNode>,
        r: &ComponentTransfer,
        g: &ComponentTransfer,
        b: &ComponentTransfer,
        a: &ComponentTransfer,
    ) -> ComponentTransferNode {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gsk_component_transfer_node_new(
                child.as_ref().to_glib_none().0,
                r.to_glib_none().0,
                g.to_glib_none().0,
                b.to_glib_none().0,
                a.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gsk_component_transfer_node_get_child")]
    #[doc(alias = "get_child")]
    pub fn child(&self) -> RenderNode {
        unsafe {
            from_glib_none(ffi::gsk_component_transfer_node_get_child(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gsk_component_transfer_node_get_transfer")]
    #[doc(alias = "get_transfer")]
    pub fn transfer(&self, component: u32) -> ComponentTransfer {
        unsafe {
            from_glib_none(ffi::gsk_component_transfer_node_get_transfer(
                self.to_glib_none().0,
                component,
            ))
        }
    }
}
