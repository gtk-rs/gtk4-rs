// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::RenderNode;
use crate::Transform;
use glib::translate::*;
use glib::StaticType;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GskTransformNode")]
    pub struct TransformNode(Shared<ffi::GskTransformNode>);

    match fn {
        ref => |ptr| ffi::gsk_render_node_ref(ptr as *mut ffi::GskRenderNode),
        unref => |ptr| ffi::gsk_render_node_unref(ptr as *mut ffi::GskRenderNode),
    }
}

impl glib::StaticType for TransformNode {
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::gsk_transform_node_get_type()) }
    }
}

impl TransformNode {
    #[doc(alias = "gsk_transform_node_new")]
    pub fn new(child: impl AsRef<RenderNode>, transform: &Transform) -> TransformNode {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gsk_transform_node_new(
                child.as_ref().to_glib_none().0,
                transform.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gsk_transform_node_get_child")]
    #[doc(alias = "get_child")]
    pub fn child(&self) -> RenderNode {
        unsafe { from_glib_none(ffi::gsk_transform_node_get_child(self.to_glib_none().0)) }
    }

    #[doc(alias = "gsk_transform_node_get_transform")]
    #[doc(alias = "get_transform")]
    pub fn transform(&self) -> Transform {
        unsafe { from_glib_none(ffi::gsk_transform_node_get_transform(self.to_glib_none().0)) }
    }
}

impl fmt::Display for TransformNode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("TransformNode")
    }
}
