// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{MaskMode, RenderNode};
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GskMaskNode")]
    pub struct MaskNode(Shared<ffi::GskMaskNode>);

    match fn {
        ref => |ptr| ffi::gsk_render_node_ref(ptr as *mut ffi::GskRenderNode),
        unref => |ptr| ffi::gsk_render_node_unref(ptr as *mut ffi::GskRenderNode),
    }
}

impl glib::StaticType for MaskNode {
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::gsk_mask_node_get_type()) }
    }
}

impl MaskNode {
    #[doc(alias = "gsk_mask_node_new")]
    pub fn new(
        source: impl AsRef<RenderNode>,
        mask: impl AsRef<RenderNode>,
        mask_mode: MaskMode,
    ) -> MaskNode {
        skip_assert_initialized!();
        unsafe {
            from_glib_full(ffi::gsk_mask_node_new(
                source.as_ref().to_glib_none().0,
                mask.as_ref().to_glib_none().0,
                mask_mode.into_glib(),
            ))
        }
    }

    #[doc(alias = "gsk_mask_node_get_mask")]
    #[doc(alias = "get_mask")]
    pub fn mask(&self) -> RenderNode {
        unsafe { from_glib_none(ffi::gsk_mask_node_get_mask(self.to_glib_none().0)) }
    }

    #[doc(alias = "gsk_mask_node_get_mask_mode")]
    #[doc(alias = "get_mask_mode")]
    pub fn mask_mode(&self) -> MaskMode {
        unsafe { from_glib(ffi::gsk_mask_node_get_mask_mode(self.to_glib_none().0)) }
    }

    #[doc(alias = "gsk_mask_node_get_source")]
    #[doc(alias = "get_source")]
    pub fn source(&self) -> RenderNode {
        unsafe { from_glib_none(ffi::gsk_mask_node_get_source(self.to_glib_none().0)) }
    }
}

impl fmt::Display for MaskNode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MaskNode")
    }
}
