// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ffi;
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GdkX11DeviceManagerXI2")]
    pub struct X11DeviceManagerXI2(Object<ffi::GdkX11DeviceManagerXI2, ffi::GdkX11DeviceManagerXI2Class>);

    match fn {
        type_ => || ffi::gdk_x11_device_manager_xi2_get_type(),
    }
}

impl X11DeviceManagerXI2 {
    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`X11DeviceManagerXI2`] objects.
    ///
    /// This method returns an instance of [`X11DeviceManagerXI2Builder`](crate::builders::X11DeviceManagerXI2Builder) which can be used to create [`X11DeviceManagerXI2`] objects.
    pub fn builder() -> X11DeviceManagerXI2Builder {
        X11DeviceManagerXI2Builder::new()
    }

    pub fn display(&self) -> Option<gdk::Display> {
        ObjectExt::property(self, "display")
    }

    pub fn major(&self) -> i32 {
        ObjectExt::property(self, "major")
    }

    pub fn minor(&self) -> i32 {
        ObjectExt::property(self, "minor")
    }

    pub fn opcode(&self) -> i32 {
        ObjectExt::property(self, "opcode")
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`X11DeviceManagerXI2`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct X11DeviceManagerXI2Builder {
    builder: glib::object::ObjectBuilder<'static, X11DeviceManagerXI2>,
}

impl X11DeviceManagerXI2Builder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn display<'a, P: IsA<gdk::Display>>(self, display: impl Into<Option<&'a P>>) -> Self {
        Self {
            builder: self
                .builder
                .property("display", display.into().as_ref().map(|p| p.as_ref())),
        }
    }

    pub fn major(self, major: i32) -> Self {
        Self {
            builder: self.builder.property("major", major),
        }
    }

    pub fn minor(self, minor: i32) -> Self {
        Self {
            builder: self.builder.property("minor", minor),
        }
    }

    pub fn opcode(self, opcode: i32) -> Self {
        Self {
            builder: self.builder.property("opcode", opcode),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`X11DeviceManagerXI2`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> X11DeviceManagerXI2 {
        assert_initialized_main_thread!();
        self.builder.build()
    }
}
