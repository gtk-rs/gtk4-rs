searchState.loadedDescShard("gsk4", 0, "Rust GSK 4 bindings\nUse the alpha channel of the mask\nAnalyzing the matrix concluded that it does not fit in any …\nuse a cut-off join, the join is cut off at half the line …\nThe blend modes available for render nodes.\nA render node applying a blending function between its two …\nA node that blends two children together\nA render node applying a blur effect to its single child.\nA node that applies a blur\nA GLSL bool / gboolean uniform\nA render node for a border.\nA node stroking a border around an area\nThe bottom left corner\nThe bottom right corner\nImplements\nStart and stop the line exactly at the start and end point\nAllow emission of <code>GSK_PATH_CONIC</code> operations.\nAllow emission of <code>GSK_PATH_CUBIC</code> operations.\nA render node for a Cairo surface.\nA node drawing a <code>cairo::Surface</code>\nA GSK renderer that is using cairo.\nA render node applying a rectangular clip to its single …\nA node that clips its child to a rectangular area\nA close operation ending the current contour with a line …\nCreates a color with the hue and saturation of the source …\nDarkens the destination color to reflect the source color\nBrightens the destination color to reflect the source color\nA render node controlling the color matrix of its single …\nA node that applies a color matrix to every pixel\nA render node for a solid color.\nA node drawing a single color rectangle\nA color stop in a gradient node.\nA rational quadratic Bézier curve with 3 points describing\nA render node for a conic gradient.\nA node drawing a conic gradient\nA render node that can contain other render nodes.\nA node containing a stack of children\nThe corner indices used by <code>RoundedRect</code>.\nA render node cross fading between two child nodes.\nA node that cross-fades between two children\nA curve-to operation describing a cubic Bézier curve with …\nSelects the darker of the destination and source colors\nA render node that emits a debugging message when drawing …\nDebug information that does not affect the rendering\nThe default blend mode, which specifies no blending\nSubtracts the darker of the two constituent colors from …\nCounts the total number of intersections, without regard …\nProduces an effect similar to that of the difference mode …\nA render node filling the area given by <code>Path</code> and <code>FillRule</code> …\nA node that fills a path.\n<code>FillRule</code> is used to select how paths are filled.\nA float uniform\nThe tangent against path direction of the outgoing side of …\nThe tangent in path direction of the incoming side of the …\nImplements\nA <code>GLShader</code> is a snippet of GLSL that is meant to run in the\nA render node using a GL shader when drawing its children …\nThis defines the types of the uniforms that <code>GskGLShaders</code> …\nA node that uses OpenGL fragment shaders to render\nMultiplies or screens the colors, depending on the source …\nCreates a color with the hue of the source color and the …\nThe matrix is the identity matrix.\nA render node for an inset shadow.\nA node drawing an inset shadow\nA GLSL int / gint32 uniform\nThe given data may not exist in a proper serialization\nUse the inverted alpha channel of the mask\nUse the inverted luminance of the mask, multiplied by mask …\nSelects the lighter of the destination and source colors\nA line-to operation, with 2 points describing the start and\nSpecifies how to render the start and end points of …\nSpecifies how to render the junction of two lines when …\nlinear interpolation filter\nA render node for a linear gradient.\nA node drawing a linear gradient\nUse the luminance of the mask, multiplied by mask alpha\nCreates a color with the luminosity of the source color …\nThe mask modes available for mask nodes.\nA render node masking one child node with another.\nA node that masks one child with another.\nUse a sharp angled corner\nA move-to operation, with 1 point describing the target …\nThe source color is multiplied by the destination and …\nnearest neighbor interpolation filter\nImplements\nNo type, used for uninitialized or unspecified values.\nError type. No node will ever have this type.\nThe default behavior, only allow lines.\nA render node controlling the opacity of its single child …\nA node that changes the opacity of its child\nA render node for an outset shadow.\nA node drawing an outset shadow\nMultiplies or screens the colors, depending on the …\nA location in a parse buffer.\nA <code>Path</code> describes lines and curves that are more complex …\n<code>PathBuilder</code> is an auxiliary object for constructing <code>Path</code> …\nThe values of the <code>PathDirection</code> enum are used to pick one …\nFlags that can be passed to gsk_path_foreach() to …\n<code>PathMeasure</code> is an object that allows measurements on <code>Path</code>s …\nPath operations are used to describe the segments of a <code>Path</code>…\n<code>PathPoint</code> is an opaque type representing a point on a path.\nAllow emission of <code>GSK_PATH_QUAD</code> operations\nA curve-to operation describing a quadratic Bézier curve …\nA render node for a radial gradient.\nA node drawing a radial gradient\n<code>RenderNode</code> is the basic block in a scene graph to be …\nThe type of a node determines what the node is rendering.\n<code>Renderer</code> is a class that renders a scene graph defined via …\nA render node repeating its single child node.\nA node that repeats the child’s contents\nA render node for a repeating linear gradient.\nA node drawing a repeating linear gradient\nA render node for a repeating radial gradient.\nA node drawing a repeating radial gradient\nUse a round ending, the center of the circle is the start …\nUse a round join, the center of the circle is the join …\nA render node applying a rounded rectangle clip to its …\nA node that clips its child to a rounded rectangle\nA rectangular region with rounded corners.\nCreates a color with the saturation of the source color …\nThe filters used when scaling texture data.\nMultiplies the complements of the destination and source …\nErrors that can happen during (de)serialization.\nAn object to build the uniforms data for a <code>GLShader</code>.\nThe shadow parameters in a shadow node.\nA render node drawing one or more shadows behind its …\nA node that draws a shadow below its child\nDarkens or lightens the colors, depending on the source …\nuse squared ending, the center of the square is the start …\nA <code>Stroke</code> struct collects the parameters that influence the …\nA render node that will fill the area determined by …\nA node that strokes a path.\nA node that possibly redirects part of the scene graph to …\nA render node drawing a set of glyphs.\nA node containing a glyph string\nA render node for a <code>gdk::Texture</code>.\nA node drawing a <code>gdk::Texture</code>\nA render node for a <code>gdk::Texture</code>.\nA node drawing a <code>gdk::Texture</code> scaled and filtered.\nThe tangent in path direction of the outgoing side of the …\nThe tangent against path direction of the incoming side of …\nThe top left corner\nThe top right corner\n<code>Transform</code> is an object to describe transform matrices.\nThe categories of matrices relevant for GSK and GTK.\nA render node applying a <code>Transform</code> to its single child …\nA node that renders its child after applying a matrix …\nlinear interpolation along each axis, plus mipmap …\nA GLSL uint / guint32 uniform\nThe category of the matrix has not been determined.\nThe format can not be identified\nThe version of the data is not understood\nA GLSL vec2 / graphene_vec2_t uniform\nA GLSL vec3 / graphene_vec3_t uniform\nA GLSL vec4 / graphene_vec4_t uniform\nA GSK renderer that is using Vulkan.\nIf the path crosses the ray from left-to-right, counts +1. …\nThe matrix is a 2D matrix. This is equivalent to …\nThe matrix is a combination of 2D scale and 2D translation …\nThe matrix is a 2D translation.\nThe matrix is a 3D matrix. This means that the w column …\nAdds a Cairo path to the builder.\nAdds a circle with the @center and @radius.\nAdds the outlines for the glyphs in @layout to the builder.\nAppends all of @path to the builder.\nAdds @rect as a new contour to the path built by the …\nAppends all of @path to the builder, in reverse order.\nAdds @rect as a new contour to the path built in @self.\nAdds to @self the segment of @path from @start to @end.\nGet a flags value with all known bits set.\nRetrieves the angle for the gradient in radians, …\nAdds an elliptical arc from the current point to @x3, @y3 …\nGets the value of the uniform @idx in the @args block.\nGets the value of the uniform @idx in the @args block.\nGets the value of the uniform @idx in the @args block.\nGets the value of the uniform @idx in the @args block.\nGets the value of the uniform @idx in the @args block.\nGets the value of the uniform @idx in the @args block.\nGets the value of the uniform @idx in the @args block.\nGets args for the node.\nGet the size of the data block used to specify arguments …\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nReturn the inner pointer to the underlying C value.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nRetrieves the blend mode used by @self.\nRetrieves the blur radius to apply to the shadow.\nRetrieves the blur radius of the shadow.\nRetrieves the bottom <code>RenderNode</code> child of the @self.\nRetrieves the boundaries of the @self.\nComputes the bounds of the given path.\nCreates a new builder-pattern struct instance to construct …\nCreates a new builder-pattern struct instance to construct …\nCreates a new builder-pattern struct instance to construct …\nBuilder pattern types.\nReturns the category this transform belongs to.\nRetrieves the center pointer for the gradient.\nRetrieves the center pointer for the gradient.\nRetrieves the child <code>RenderNode</code> of the blur @self.\nGets the child node that is getting clipped by the given …\nGets the child node that is getting its colors modified by …\nGets one of the children of @container.\nGets the child node that is getting drawn by the given …\nGets the child node that is getting drawn by the given …\nGets one of the children.\nGets the child node that is getting opacityed by the given …\nRetrieves the child of @self.\nGets the child node that is getting clipped by the given …\nRetrieves the child <code>RenderNode</code> of the shadow @self.\nGets the child node that is getting drawn by the given …\nGets the child node that is getting transformed by the …\nRetrieves the bounding rectangle of the child of @self.\nRetrieves the clip rectangle for @self.\nRetrieves the rounded rectangle used to clip the contents …\nEnds the current contour with a line back to the start …\nComputes the closest point on the path to the given point …\nRetrieves the color of the given @self.\nRetrieves the color of the inset shadow.\nRetrieves the color of the outset shadow.\nRetrieves the color used by the text @self.\nRetrieves the color matrix used by the @self.\nRetrieves the color offset used by the @self.\nRetrieves the color stops in the gradient.\nRetrieves the color stops in the gradient.\nRetrieves the color stops in the gradient.\nRetrieves the colors of the border.\nTries to compile the @self for the given @renderer.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nAdds a conic curve from the current point to @x2, @y2 with …\nWhether all set bits in a source flags value are also set …\nChecks if the given @point is inside the rounded rectangle.\nChecks if the given @rect is contained inside the rounded …\nAdds a cubic Bézier curve from the current point to @x3, …\nGets the current point.\nCalculates the curvature of the path at the point.\nGets the dash array in use or <code>NULL</code> if dashing is disabled.\nReturns the dash_offset of a <code>Stroke</code>.\nLoads data previously created via <code>serialize()</code>.\nThe intersection of a source flags value with the …\nReturns the distance from the beginning of the path to …\nDraw the contents of @self to the given cairo context.\nCreates a Cairo context for drawing using the surface …\nRetrieves the horizontal offset of the inset shadow.\nRetrieves the horizontal offset of the outset shadow.\nRetrieves the vertical offset of the inset shadow.\nRetrieves the vertical offset of the outset shadow.\nGet a flags value with all bits unset.\nRetrieves the final point of the linear gradient.\nRetrieves the end value for the gradient.\nRetrieves the child <code>RenderNode</code> at the end of the …\nGets the end point of the path.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nRetrieves the fill rule used to determine how the path is …\nRetrieves the <code>ScalingFilter</code> used when creating this …\nLooks for a uniform by the name @name, and returns the …\nReturns the font used by the text @self.\nCreates an appropriate <code>Renderer</code> instance for the given …\nCalls @func for every operation of the path.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates a <code>GLShader</code> that will render pixels using the …\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nBorrows the underlying C value mutably.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a <code>GLShader</code> that will render pixels using the …\nRetrieves the glyph information in the @self.\nChecks whether the text @self has color glyphs.\nRetrieves the horizontal radius for the gradient.\nImplements arc-to according to the HTML Canvas spec.\nReturns whether the given point is inside the area that …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nChecks if part of the given @rect is contained inside the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverts the given transform.\nWhether all known bits in this flags value are set.\nReturns if the path represents a single closed contour.\nChecks if the path is empty, i.e. contains no lines or …\nWhether all bits in this flags value are unset.\nChecks if all corners of @self are right angles and the …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nGets the length of the path being measured.\nGets the line cap used.\nGets the line join used.\nDraws a line from the current point to @x, @y and makes it …\nGets the line width used.\nRetrieves the mask <code>RenderNode</code> child of the @self.\nRetrieves the mask mode used by @self.\nMultiplies @self with the given @matrix.\nGets the debug message that was set on this node\nReturns the miter limit of a <code>Stroke</code>.\nStarts a new contour by placing the pen at @x, @y.\nRetrieves the number of direct children of @self.\nReturns the number of children\nRetrieves the number of color stops in the gradient.\nRetrieves the number of color stops in the gradient.\nRetrieves the number of color stops in the gradient.\nRetrieves the number of shadows in the @self.\nReturns the number of textures that the shader requires.\nGet the number of declared uniforms for this shader.\nCreates a <code>RenderNode</code> that will use @blend_mode to blend …\nCreates a render node that blurs the child.\nCreates a <code>RenderNode</code> that will stroke a border rectangle …\nCreates a new Broadway renderer.\nCreates a <code>RenderNode</code> that will render a cairo surface into …\nCreates a new Cairo renderer.\nCreates a <code>RenderNode</code> that will clip the @child to the area …\nCreates a <code>RenderNode</code> that will drawn the @child with …\nCreates a <code>RenderNode</code> that will render the color specified …\nCreates a <code>RenderNode</code> that draws a conic gradient.\nCreates a new <code>RenderNode</code> instance for holding the given …\nCreates a <code>RenderNode</code> that will do a cross-fade between …\nCreates a <code>RenderNode</code> that will add debug information about …\nCreates a <code>RenderNode</code> that will fill the @child in the area …\nCreates a new <code>Renderer</code> using the new OpenGL renderer.\nCreates a <code>RenderNode</code> that will render the given @shader …\nCreates a <code>RenderNode</code> that will render an inset shadow into …\nCreates a <code>RenderNode</code> that will create a linear gradient …\nCreates a <code>RenderNode</code> that will mask a given node by …\nCreates a <code>RenderNode</code> that will drawn the @child with …\nCreates a <code>RenderNode</code> that will render an outset shadow …\nCreates a <code>RenderNode</code> that draws a radial gradient.\nCreates a <code>RenderNode</code> that will repeat the drawing of …\nCreates a <code>RenderNode</code> that will create a repeating linear …\nCreates a <code>RenderNode</code> that draws a repeating radial …\nCreates a <code>RenderNode</code> that will clip the @child to the area …\nCreates a <code>RenderNode</code> that will draw a @child with the given\nCreates a #GskRenderNode that will fill the outline …\nCreates a render node that renders the given glyphs.\nCreates a <code>RenderNode</code> that will render the given @texture …\nCreates a node that scales the texture to the size given …\nCreates a <code>RenderNode</code> that will transform the given @child …\nCreate a new <code>PathBuilder</code> object.\nCreates a measure object for the given @path with the …\nAllocates a builder that can be used to construct a new …\nCreates a new <code>Stroke</code> with the given @line_width.\nReturns the type of the @self.\nNormalizes the passed rectangle.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nRetrieves the number of glyphs in the text node.\nRetrieves the offset applied to the text.\nOffsets the bound’s origin by @dx and @dy.\nGets the transparency factor for an opacity node.\nRetrieves the outline of the border.\nRetrieves the outline rectangle of the inset shadow.\nRetrieves the outline rectangle of the outset shadow.\nThis is a convenience function that constructs a <code>Path</code> from …\nParses the given @string into a transform and puts it in …\nRetrieves the path used to describe the area filled with …\nRetrieves the path that will be stroked with the contents …\nReturns the path that the measure was created for.\nApplies a perspective projection transform.\nSets @result to the point at the given distance into the …\nGets the position of the point.\nTraits intended for blanket imports.\nRetrieves the progress value of the cross fade.\nAdds a quadratic Bézier curve from the current point to …\nRetrieves the blur radius of the @self.\nAdds an elliptical arc from the current point to @x3, @y3 …\nAdds a conic curve from the current point to @x2, @y2 with …\nAdds a cubic Bézier curve from the current point to @x3, …\nImplements arc-to according to the HTML Canvas spec.\nDraws a line from the current point to a point offset from …\nStarts a new contour by placing the pen at @x, @y relative …\nAdds a quadratic Bézier curve from the current point to …\nImplements arc-to according to the SVG spec.\nThe intersection of a source flags value with the …\nGets the resource path for the GLSL sourcecode being used …\nRotates @self @angle degrees in 2D - or in 3D-speak, …\nRotates @self @angle degrees around @axis.\nRetrieves the rotation for the gradient in degrees.\nGets the direction of the tangent at a given point.\nScales @self in 2-dimensional space by the given factors.\nScales @self by the given factors.\nSerializes the @self for later deserialization via …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSets the value of the uniform @idx.\nSets the dash pattern to use by this stroke.\nSets the offset into the dash pattern where dashing should …\nSets the value of the uniform @idx.\nSets the value of the uniform @idx.\nSets the line cap to be used when stroking.\nSets the line join to be used when stroking.\nSets the line width to be used when stroking.\nSets the limit for the distance from the corner where sharp\nSets the value of the uniform @idx.\nSets the value of the uniform @idx.\nSets the value of the uniform @idx.\nSets the value of the uniform @idx.\nGets shader code for the node.\nRetrieves the shadow data at the given index @i.\nShrinks (or grows) the given rectangle by moving the 4 …\nApplies a skew transform.\nGets the GLSL sourcecode being used to render this shader.\nRetrieves the source <code>RenderNode</code> child of the @self.\nRetrieves how much the shadow spreads inwards.\nRetrieves how much the shadow spreads outwards.\nRetrieves the initial point of the linear gradient.\nRetrieves the start value for the gradient.\nRetrieves the child <code>RenderNode</code> at the beginning of the …\nGets the start point of the path.\nRetrieves the stroke attributes used in this @self.\nComputes the bounds for stroking the given path with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nRetrieves the Cairo surface used by the render node.\nImplements arc-to according to the SVG spec.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGets the tangent of the path at the point.\nRetrieves the <code>gdk::Texture</code> used when creating this …\nRetrieves the <code>gdk::Texture</code> used when creating this …\nConverts a <code>Transform</code> to a 2D transformation matrix.\nConverts a <code>Transform</code> to 2D transformation factors.\nConverts a <code>Transform</code> to 2D affine transformation factors.\nCreates a new <code>GBytes</code> args from the current state of the …\nAppends the given @path to the given cairo context for …\nA helper function that sets the stroke parameters of @cr …\nComputes the actual value of @self and stores it in …\nCreates a new <code>Path</code> from the given builder.\nConverts the path into a string that is suitable for …\nConverts a matrix into a string that is suitable for …\nConverts a <code>Transform</code> to a translation operation.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the tolerance that the measure was created with.\nRetrieves the top <code>RenderNode</code> child of the @self.\nRetrieves the <code>Transform</code> used by the @self.\nApplies all the operations from @other to @self.\nTransforms a <code>graphene::Rect</code> using the given transform …\nTransforms a <code>graphene::Point</code> using the given transform …\nTranslates @self in 2-dimensional space by @point.\nTranslates @self by @point.\nGet the name of the declared uniform for this shader at …\nGet the offset into the data block where data for this …\nGet the type of the declared uniform for this shader at …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRetrieves the vertical radius for the gradient.\nRetrieves the stroke widths of the border.\nCreates a measure object for the given @path and …\nThis function is equivalent to calling <code>serialize()</code> …\nA builder-pattern type to construct <code>ColorStop</code> objects.\nA builder-pattern type to construct <code>GLShader</code> objects.\nA builder-pattern type to construct a <code>Stroke</code>.\nBuild the <code>GLShader</code>.\nBuild the <code>Stroke</code>.\nBuild the <code>ColorStop</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>ColorStopBuilder</code>.\nResource containing the source code for the shader.\nTrait containing all <code>Renderer</code> methods.\nA common trait implemented by the various <code>RenderNode</code> types.\nChecks whether the @self is realized or not.\nChecks whether the @self is realized or not.\nCreates the resources needed by the @self to render the …\nCreates the resources needed by the @self to render the …\nCreates the resources needed by the @self to render the …\nCreates the resources needed by the @self to render the …\nRenders the scene graph, described by a tree of <code>RenderNode</code> …\nRenders the scene graph, described by a tree of <code>RenderNode</code> …\nRenders the scene graph, described by a tree of <code>RenderNode</code> …\nRenders the scene graph, described by a tree of <code>RenderNode</code> …\nRetrieves the <code>gdk::Surface</code> set using gsk_enderer_realize().\nRetrieves the <code>gdk::Surface</code> set using gsk_enderer_realize().\nReleases all the resources created by …\nReleases all the resources created by …")