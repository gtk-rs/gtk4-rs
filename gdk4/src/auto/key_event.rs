// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Event;
use crate::ModifierType;
use glib::translate::*;
use glib::StaticType;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GdkKeyEvent")]
    pub struct KeyEvent(Shared<ffi::GdkKeyEvent>);

    match fn {
        ref => |ptr| ffi::gdk_event_ref(ptr as *mut ffi::GdkEvent),
        unref => |ptr| ffi::gdk_event_unref(ptr as *mut ffi::GdkEvent),
    }
}

impl glib::StaticType for KeyEvent {
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::gdk_key_event_get_type()) }
    }
}

impl KeyEvent {
    #[doc(alias = "gdk_key_event_get_consumed_modifiers")]
    #[doc(alias = "get_consumed_modifiers")]
    pub fn consumed_modifiers(&self) -> ModifierType {
        unsafe {
            from_glib(ffi::gdk_key_event_get_consumed_modifiers(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gdk_key_event_get_keycode")]
    #[doc(alias = "get_keycode")]
    pub fn keycode(&self) -> u32 {
        unsafe { ffi::gdk_key_event_get_keycode(self.to_glib_none().0) }
    }

    #[doc(alias = "gdk_key_event_get_layout")]
    #[doc(alias = "get_layout")]
    pub fn layout(&self) -> u32 {
        unsafe { ffi::gdk_key_event_get_layout(self.to_glib_none().0) }
    }

    #[doc(alias = "gdk_key_event_get_level")]
    #[doc(alias = "get_level")]
    pub fn level(&self) -> u32 {
        unsafe { ffi::gdk_key_event_get_level(self.to_glib_none().0) }
    }

    #[doc(alias = "gdk_key_event_is_modifier")]
    pub fn is_modifier(&self) -> bool {
        unsafe { from_glib(ffi::gdk_key_event_is_modifier(self.to_glib_none().0)) }
    }
}

impl fmt::Display for KeyEvent {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("KeyEvent")
    }
}
