// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT
#![allow(deprecated)]

use crate::{ffi, Accessible, Buildable, ConstraintTarget, Widget};
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "GtkAppChooser")]
    pub struct AppChooser(Interface<ffi::GtkAppChooser>) @requires Widget, Accessible, Buildable, ConstraintTarget;

    match fn {
        type_ => || ffi::gtk_app_chooser_get_type(),
    }
}

impl AppChooser {
    pub const NONE: Option<&'static AppChooser> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::AppChooser>> Sealed for T {}
}

pub trait AppChooserExt: IsA<AppChooser> + sealed::Sealed + 'static {
    #[cfg_attr(feature = "v4_10", deprecated = "Since 4.10")]
    #[allow(deprecated)]
    #[doc(alias = "gtk_app_chooser_get_app_info")]
    #[doc(alias = "get_app_info")]
    fn app_info(&self) -> Option<gio::AppInfo> {
        unsafe {
            from_glib_full(ffi::gtk_app_chooser_get_app_info(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v4_10", deprecated = "Since 4.10")]
    #[allow(deprecated)]
    #[doc(alias = "gtk_app_chooser_get_content_type")]
    #[doc(alias = "get_content_type")]
    #[doc(alias = "content-type")]
    fn content_type(&self) -> glib::GString {
        unsafe {
            from_glib_full(ffi::gtk_app_chooser_get_content_type(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[cfg_attr(feature = "v4_10", deprecated = "Since 4.10")]
    #[allow(deprecated)]
    #[doc(alias = "gtk_app_chooser_refresh")]
    fn refresh(&self) {
        unsafe {
            ffi::gtk_app_chooser_refresh(self.as_ref().to_glib_none().0);
        }
    }
}

impl<O: IsA<AppChooser>> AppChooserExt for O {}
