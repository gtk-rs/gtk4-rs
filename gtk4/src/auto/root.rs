// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Accessible;
use crate::Buildable;
use crate::ConstraintTarget;
use crate::Native;
use crate::Widget;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GtkRoot")]
    pub struct Root(Interface<ffi::GtkRoot, ffi::GtkRootInterface>) @requires Native, Widget, Accessible, Buildable, ConstraintTarget;

    match fn {
        type_ => || ffi::gtk_root_get_type(),
    }
}

impl Root {
    pub const NONE: Option<&'static Root> = None;
}

pub trait RootExt: 'static {
    #[doc(alias = "gtk_root_get_display")]
    #[doc(alias = "get_display")]
    fn display(&self) -> gdk::Display;

    #[doc(alias = "gtk_root_get_focus")]
    #[doc(alias = "get_focus")]
    fn focus(&self) -> Option<Widget>;

    #[doc(alias = "gtk_root_set_focus")]
    fn set_focus(&self, focus: Option<&impl IsA<Widget>>);
}

impl<O: IsA<Root>> RootExt for O {
    fn display(&self) -> gdk::Display {
        unsafe { from_glib_none(ffi::gtk_root_get_display(self.as_ref().to_glib_none().0)) }
    }

    fn focus(&self) -> Option<Widget> {
        unsafe { from_glib_none(ffi::gtk_root_get_focus(self.as_ref().to_glib_none().0)) }
    }

    fn set_focus(&self, focus: Option<&impl IsA<Widget>>) {
        unsafe {
            ffi::gtk_root_set_focus(
                self.as_ref().to_glib_none().0,
                focus.map(|p| p.as_ref()).to_glib_none().0,
            );
        }
    }
}

impl fmt::Display for Root {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Root")
    }
}
