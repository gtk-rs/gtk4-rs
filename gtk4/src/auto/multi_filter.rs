// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Buildable;
use crate::Filter;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GtkMultiFilter")]
    pub struct MultiFilter(Object<ffi::GtkMultiFilter, ffi::GtkMultiFilterClass>) @extends Filter, @implements gio::ListModel, Buildable;

    match fn {
        type_ => || ffi::gtk_multi_filter_get_type(),
    }
}

impl MultiFilter {
    pub const NONE: Option<&'static MultiFilter> = None;
}

pub trait MultiFilterExt: 'static {
    #[doc(alias = "gtk_multi_filter_append")]
    fn append(&self, filter: &impl IsA<Filter>);

    #[doc(alias = "gtk_multi_filter_remove")]
    fn remove(&self, position: u32);
}

impl<O: IsA<MultiFilter>> MultiFilterExt for O {
    fn append(&self, filter: &impl IsA<Filter>) {
        unsafe {
            ffi::gtk_multi_filter_append(
                self.as_ref().to_glib_none().0,
                filter.as_ref().to_glib_full(),
            );
        }
    }

    fn remove(&self, position: u32) {
        unsafe {
            ffi::gtk_multi_filter_remove(self.as_ref().to_glib_none().0, position);
        }
    }
}

impl fmt::Display for MultiFilter {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MultiFilter")
    }
}
