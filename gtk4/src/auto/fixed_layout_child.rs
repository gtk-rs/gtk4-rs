// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, LayoutChild};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GtkFixedLayoutChild")]
    pub struct FixedLayoutChild(Object<ffi::GtkFixedLayoutChild, ffi::GtkFixedLayoutChildClass>) @extends LayoutChild;

    match fn {
        type_ => || ffi::gtk_fixed_layout_child_get_type(),
    }
}

impl FixedLayoutChild {
    #[doc(alias = "gtk_fixed_layout_child_get_transform")]
    #[doc(alias = "get_transform")]
    pub fn transform(&self) -> Option<gsk::Transform> {
        unsafe {
            from_glib_none(ffi::gtk_fixed_layout_child_get_transform(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_fixed_layout_child_set_transform")]
    #[doc(alias = "transform")]
    pub fn set_transform(&self, transform: &gsk::Transform) {
        unsafe {
            ffi::gtk_fixed_layout_child_set_transform(
                self.to_glib_none().0,
                transform.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "transform")]
    pub fn connect_transform_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_transform_trampoline<F: Fn(&FixedLayoutChild) + 'static>(
            this: *mut ffi::GtkFixedLayoutChild,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::transform\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_transform_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}
