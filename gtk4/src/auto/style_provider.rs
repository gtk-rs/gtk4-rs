// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::ffi;
use glib::{
    object::ObjectType as _,
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GtkStyleProvider")]
    pub struct StyleProvider(Interface<ffi::GtkStyleProvider>);

    match fn {
        type_ => || ffi::gtk_style_provider_get_type(),
    }
}

impl StyleProvider {
    pub const NONE: Option<&'static StyleProvider> = None;
}

pub trait StyleProviderExt: IsA<StyleProvider> + 'static {
    #[doc(alias = "gtk-private-changed")]
    fn connect_gtk_private_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn gtk_private_changed_trampoline<
            P: IsA<StyleProvider>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GtkStyleProvider,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(StyleProvider::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"gtk-private-changed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    gtk_private_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<StyleProvider>> StyleProviderExt for O {}
