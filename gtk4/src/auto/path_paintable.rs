// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{ffi, SymbolicPaintable};
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GtkPathPaintable")]
    pub struct PathPaintable(Object<ffi::GtkPathPaintable, ffi::GtkPathPaintableClass>) @implements gdk::Paintable, SymbolicPaintable;

    match fn {
        type_ => || ffi::gtk_path_paintable_get_type(),
    }
}

impl PathPaintable {
    #[doc(alias = "gtk_path_paintable_new_from_bytes")]
    #[doc(alias = "new_from_bytes")]
    pub fn from_bytes(bytes: &glib::Bytes) -> Result<PathPaintable, glib::Error> {
        assert_initialized_main_thread!();
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::gtk_path_paintable_new_from_bytes(bytes.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "gtk_path_paintable_new_from_resource")]
    #[doc(alias = "new_from_resource")]
    pub fn from_resource(path: &str) -> PathPaintable {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gtk_path_paintable_new_from_resource(
                path.to_glib_none().0,
            ))
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`PathPaintable`] objects.
    ///
    /// This method returns an instance of [`PathPaintableBuilder`](crate::builders::PathPaintableBuilder) which can be used to create [`PathPaintable`] objects.
    pub fn builder() -> PathPaintableBuilder {
        PathPaintableBuilder::new()
    }

    #[doc(alias = "gtk_path_paintable_get_max_state")]
    #[doc(alias = "get_max_state")]
    pub fn max_state(&self) -> u32 {
        unsafe { ffi::gtk_path_paintable_get_max_state(self.to_glib_none().0) }
    }

    #[doc(alias = "gtk_path_paintable_get_state")]
    #[doc(alias = "get_state")]
    pub fn state(&self) -> u32 {
        unsafe { ffi::gtk_path_paintable_get_state(self.to_glib_none().0) }
    }

    #[doc(alias = "gtk_path_paintable_get_weight")]
    #[doc(alias = "get_weight")]
    pub fn weight(&self) -> f32 {
        unsafe { ffi::gtk_path_paintable_get_weight(self.to_glib_none().0) }
    }

    #[doc(alias = "gtk_path_paintable_set_state")]
    #[doc(alias = "state")]
    pub fn set_state(&self, state: u32) {
        unsafe {
            ffi::gtk_path_paintable_set_state(self.to_glib_none().0, state);
        }
    }

    #[doc(alias = "gtk_path_paintable_set_weight")]
    #[doc(alias = "weight")]
    pub fn set_weight(&self, weight: f32) {
        unsafe {
            ffi::gtk_path_paintable_set_weight(self.to_glib_none().0, weight);
        }
    }

    #[cfg(feature = "v4_22")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v4_22")))]
    #[doc(alias = "state")]
    pub fn connect_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_state_trampoline<F: Fn(&PathPaintable) + 'static>(
            this: *mut ffi::GtkPathPaintable,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::state".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_state_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[cfg(feature = "v4_22")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v4_22")))]
    #[doc(alias = "weight")]
    pub fn connect_weight_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_weight_trampoline<F: Fn(&PathPaintable) + 'static>(
            this: *mut ffi::GtkPathPaintable,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::weight".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_weight_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`PathPaintable`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct PathPaintableBuilder {
    builder: glib::object::ObjectBuilder<'static, PathPaintable>,
}

impl PathPaintableBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    #[cfg(feature = "v4_22")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v4_22")))]
    pub fn resource(self, resource: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("resource", resource.into()),
        }
    }

    #[cfg(feature = "v4_22")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v4_22")))]
    pub fn state(self, state: u32) -> Self {
        Self {
            builder: self.builder.property("state", state),
        }
    }

    #[cfg(feature = "v4_22")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v4_22")))]
    pub fn weight(self, weight: f32) -> Self {
        Self {
            builder: self.builder.property("weight", weight),
        }
    }

    // rustdoc-stripper-ignore-next
    /// Build the [`PathPaintable`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> PathPaintable {
        assert_initialized_main_thread!();
        self.builder.build()
    }
}
