// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "GdkWaylandDevice")]
    pub struct WaylandDevice(Object<ffi::GdkWaylandDevice, ffi::GdkWaylandDeviceClass>) @extends gdk::Device;

    match fn {
        type_ => || ffi::gdk_wayland_device_get_type(),
    }
}

impl WaylandDevice {
    #[doc(alias = "gdk_wayland_device_get_node_path")]
    #[doc(alias = "get_node_path")]
    pub fn node_path(&self) -> Option<glib::GString> {
        unsafe { from_glib_none(ffi::gdk_wayland_device_get_node_path(self.to_glib_none().0)) }
    }

    //#[cfg(any(feature = "v4_4", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v4_4")))]
    //#[doc(alias = "gdk_wayland_device_get_xkb_keymap")]
    //#[doc(alias = "get_xkb_keymap")]
    //pub fn xkb_keymap(&self) -> /*Unimplemented*/Option<Fundamental: Pointer> {
    //    unsafe { TODO: call ffi:gdk_wayland_device_get_xkb_keymap() }
    //}
}

impl fmt::Display for WaylandDevice {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("WaylandDevice")
    }
}
